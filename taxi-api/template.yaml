AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  taxi-coop

  Sample SAM Template for taxi-coop

Parameters:
  SouthWest:
    Type: String
    Default: 12.8,77.5
  NorthEast:
    Type: String
    Default: 13.5,78.2
  DBUser:
    Type: String
    Description: Document DB User
    Default: taxi
  DBPass:
    Type: String
    Description: Document DB Password
    Default: taxi1234
  DBEndPoint:
    Type: String
    Description: Document DB Endpoint
    Default: My Endpoint
  DBSecurityGroups:
    Type: CommaDelimitedList
    Description: Security Groupd Ids of DB Cluster VPC
  DBSubnets:
    Type: CommaDelimitedList
    Description: Subnets in DB Cluster VPC
  RegisterLambdaArn:
    Type: String
    Description: Arn of Lambda Function for Taxi Registration in DB
  QueryLambdaArn:
    Type: String
    Description: Arn of Lambda Function for querying the DocDB
  IoTPolicy:
    Type: String
    Description: IoT Policy
    Default: Taxi_policy
  IoTThingType:
    Type: String
    Description: IoT Thing Type
    Default: TAXI
  IoTThingGroup:
    Type: String
    Description: IoT Thing Group
    Default: Taxi_group

Globals:
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
  Function:
    Timeout: 3
    MemorySize: 128
    Environment:
      Variables:
        SOUTHWEST: !Ref SouthWest
        NORTHEAST: !Ref NorthEast

Resources:
  TCGeocoderFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: tc_geocoder/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Events:
        TCGeocoder:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /geocoder
            Method: any

  TCDirectionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tc_directions/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Events:
        TCDirections:
          Type: Api
          Properties:
            Path: /directions
            Method: any

  TCRegisterTaxiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tc_register_taxi/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Environment:
        Variables:
          register_lambda_arn: !Ref RegisterLambdaArn
          iot_policy: !Ref IoTPolicy
          iot_thing_type: !Ref IoTThingType
          iot_thing_group: !Ref IoTThingGroup
      Policies:
        - AWSIoTFullAccess
        - Version: '2012-10-17'
          Statement:
          - Sid: LambdaInvokePolicy
            Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:InvokeAsync
            Resource: !Ref RegisterLambdaArn
      Events:
        TCRegisterTaxi:
          Type: Api
          Properties:
            Path: /taxis
            Method: post

  TCTaxisFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tc_taxis/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Environment:
        Variables:
          db_user: !Ref DBUser
          db_pass: !Ref DBPass
          db_endpoint: !Ref DBEndPoint
      VpcConfig:
          SecurityGroupIds: !Ref DBSecurityGroups
          SubnetIds: !Ref DBSubnets
      Events:
        TCGetTaxis:
          Type: Api
          Properties:
            Path: /taxis
            Method: get
        TCGetTaxi:
          Type: Api
          Properties:
            Path: /taxis/{id}
            Method: get
          TCDeleteTaxi:
            Type: Api
            Properties:
              Path: /taxis/{id}
              Method: delete
          TCPatchUsers:
            Type: Api
            Properties:
              Path: /taxis/{id}
              Method: patch

  TCRequestRideFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tc_request_ride/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Environment:
        Variables:
          query_lambda_arn: !Ref QueryLambdaArn
          iot_policy: !Ref IoTPolicy
          iot_thing_type: !Ref IoTThingType
          iot_thing_group: !Ref IoTThingGroup
      Policies:
        - AWSIoTFullAccess
        - Version: '2012-10-17'
          Statement:
          - Sid: LambdaInvokePolicy
            Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:InvokeAsync
            Resource: !Ref QueryLambdaArn
      Events:
        TCRequestTaxis:
          Type: Api
          Properties:
            Path: /taxis/request
            Method: post

  TCAcceptRideFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tc_accept_ride/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Environment:
        Variables:
          db_user: !Ref DBUser
          db_pass: !Ref DBPass
          db_endpoint: !Ref DBEndPoint
      VpcConfig:
          SecurityGroupIds: !Ref DBSecurityGroups
          SubnetIds: !Ref DBSubnets
      Events:
        TCAcceptRide:
          Type: Api
          Properties:
            Path: /rides/accept
            Method: post

  TCBookRideFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tc_book_ride/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Environment:
        Variables:       
          iot_policy: !Ref IoTPolicy
          iot_thing_type: !Ref IoTThingType
          iot_thing_group: !Ref IoTThingGroup
      Policies:
        - AWSIoTFullAccess   
      Events:
        TCTaxis:
          Type: Api
          Properties:
            Path: /taxis/book
            Method: post

  TCRidesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tc_rides/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Environment:
        Variables:
          db_user: !Ref DBUser
          db_pass: !Ref DBPass
          db_endpoint: !Ref DBEndPoint
      VpcConfig:
          SecurityGroupIds: !Ref DBSecurityGroups
          SubnetIds: !Ref DBSubnets
      Events:        
        TCGetRide:
          Type: Api
          Properties:
            Path: /rides/{id}
            Method: get
        TCGetRides:
          Type: Api
          Properties:
            Path: /rides
            Method: get
        TCPostRide:
          Type: Api
          Properties:
            Path: /rides
            Method: post
        TCDeleteRide:
          Type: Api
          Properties:
            Path: /rides/{id}
            Method: delete
        TCPatchRide:
          Type: Api
          Properties:
            Path: /rides/{id}
            Method: patch

  TCUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tc_users/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Environment:
        Variables:
          db_user: !Ref DBUser
          db_pass: !Ref DBPass
          db_endpoint: !Ref DBEndPoint
      VpcConfig:
          SecurityGroupIds: !Ref DBSecurityGroups
          SubnetIds: !Ref DBSubnets
      Events:        
        TCGetUsers:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: get
        TCGetAllUsers:
          Type: Api
          Properties:
            Path: /users
            Method: get
        TCPostUsers:
          Type: Api
          Properties:
            Path: /users
            Method: post
        TCDeleteUsers:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: delete
        TCPatchUsers:
          Type: Api
          Properties:
            Path: /users/{id}
            Method: patch

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  TCGeocoderApi:
    Description: "API Gateway endpoint URL for Prod stage for Geocoder function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/geocoder/"
  
  TCDirectionsApi:
    Description: "API Gateway endpoint URL for Prod stage for Directions function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/directions/"
  
  TCBookRideFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for register Taxis function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/taxis/book/"
  
  TCTaxisApi:
    Description: "API Gateway endpoint URL for Prod stage for Get Taxis function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/taxis/"
  
  TCRequestRideApi:
    Description: "API Gateway endpoint URL for Prod stage for Requesting Taxis for ride"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/taxis/request/"
  
  TCAcceptRideApi:
    Description: "API Gateway endpoint URL for Prod stage for Notifying a Taxi for ride"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/rides/accept/"
  
  TCNotifyTaxiApi:
    Description: "API Gateway endpoint URL for Prod stage for Notifying a Taxi for ride"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/taxis/notify/"
  
  TCRidesApi:
    Description: "API Gateway endpoint URL for Prod stage for Creating, Retrieving and Deleting Ride records"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/rides/"

  TCUserFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Creating, Retrieving and Deleting User"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/users/"
  
